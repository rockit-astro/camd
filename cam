#!/usr/bin/env python3
#
# This file is part of the Robotic Observatory Control Kit (rockit)
#
# rockit is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# rockit is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with rockit.  If not, see <http://www.gnu.org/licenses/>.

"""Daemon process for managing one of the cameras"""

import glob
from importlib import import_module
import json
import os
import sys
import Pyro4

SCRIPT_NAME = os.path.basename(sys.argv[0])
sys.excepthook = Pyro4.util.excepthook


if __name__ == '__main__':
    if 'CAMD_CONFIG_ROOT' in os.environ:
        config_root = os.environ['CAMD_CONFIG_ROOT']
    else:
        config_root = '/etc/camd'

    configs = {os.path.basename(p)[:-5]: p for p in glob.glob(os.path.join(config_root, '*.json'))}
    if not configs:
        print('error: no camera configs were found in ' + config_root)
        print('       run as CAMD_CONFIG_ROOT=/path/to/config/root ' + ' '.join(sys.argv))
        print('       to specify the configuration root directory')
        sys.exit(1)

    args = sys.argv[1:]
    completion = False
    if len(args) > 0 and args[0] == 'completion':
        args = args[2:]
        completion = True

    if len(configs) == 1:
        usage_prefix = SCRIPT_NAME
        camera_id = next(iter(configs))
    else:
        if len(args) == 0 or args[0] not in configs:
            if completion:
                print(' '.join(sorted(configs.keys())))
            else:
                usage_prefix = f'{SCRIPT_NAME} [{"|".join(sorted(configs.keys()))}]'
                print(f'usage: {usage_prefix} <command> [<args>]')
                print()
                print('provide a camera name to view available commands')
            sys.exit(0)
        camera_id, *args = args
        usage_prefix = f'{SCRIPT_NAME} {camera_id}'

    if completion:
        args = ['completion'] + args

    with open(configs[camera_id], 'r', encoding='utf-8') as config_file:
        config_json = json.load(config_file)

    if 'client_commands_module' not in config_json:
        print(f'error: {configs[camera_id]} does not define a client_commands_module entry')
        sys.exit(1)

    client_commands_module = import_module(config_json['client_commands_module'])

    run_client_command = getattr(client_commands_module, 'run_client_command')
    sys.exit(run_client_command(configs[camera_id], usage_prefix, args))
